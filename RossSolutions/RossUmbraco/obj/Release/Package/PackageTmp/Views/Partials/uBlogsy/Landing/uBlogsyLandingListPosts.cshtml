@*
    Lists posts for landing. 
*@

@using System.Linq
@using uBlogsy.Common.Extensions
@using uBlogsy.BusinessLogic
@using uHelpsy.Extensions
@inherits UmbracoTemplatePage
@{
    const int ITEMS_PER_PAGE = 20; // for testing

    // get item count
    var itemsPerPage = (int)ViewData["ItemsPerPage"];

    // get tag, label, or author from query string
    var tag = Request.QueryString["tag"];
    var label = Request.QueryString["label"];
    var author = Request.QueryString["author"];
    var searchTerm = Request.QueryString["search"];
    var commenter = Request.QueryString["commenter"];
    int page = int.TryParse(Request.QueryString["page"], out page) ? page : 1;
    var year = Request.QueryString["year"];
    var month = Request.QueryString["month"];
    var day = Request.QueryString["day"];
    int postCount;

    var posts = PostService.Instance.GetPosts(Model.Content, tag, label, author, searchTerm, commenter, year, month, day, out postCount).Skip((page - 1) * itemsPerPage).Take(itemsPerPage).ToIPublishedContent(true);
        //var posts = NoLuceneFallbackService.Instance.GetPosts(Model.Content.Id, tag, label, author, searchTerm, commenter, year, month, out postCount).Skip((page - 1) * itemsPerPage).Take(itemsPerPage);
    
    // pagination  
    @RenderForLanding(posts)
    @RenderPagination(page, postCount, itemsPerPage)
}




@helper RenderForLanding(IEnumerable<IPublishedContent> posts)
{
    // render search result count when this script is displaying search results
    if (Request.QueryString["search"] != null)
    {
        <h3>@posts.Count() Results:</h3>
    }

    // show each post
    foreach (var n in posts)
    {
        <!-- The new post done by user's all in the post block -->
        <div class="blog-post">
            @Html.Partial("uBlogsy/Landing/uBlogsyLandingShowPost", new ViewDataDictionary(ViewData) { { "Node", n }, { "GravatarSize", 40 }, { "ImageWidth", 300 }, { "ImageHeight", -1 } })
        </div>        
    }
}





@helper RenderPagination(int page, int postCount, int itemsPerPage)
{
    
    var pages = (int) Math.Ceiling((double) postCount/itemsPerPage);
    var url = Request.Url.ToString();


    if (pages > 1)
    {
        <!-- Pagination -->
        <div class="paging">
            @if (page > 1)
            {
                url = url.ReplaceQueryStringItem("page", (page - 1).ToString());
                <a href="@url">Prev</a>
            }


            @* render page links *@
            @for (int i = 1; i < pages + 1; i++)
            {
                url = url.ReplaceQueryStringItem("page", i.ToString());
                var liClass = i == page ? "current" : string.Empty;

                if (page == i)
                {
                    <span class="@liClass">@i</span>
                }
                else
                {
                    <a href="@url">@i</a>
                }

            }


            @* render next link *@

            @if (page < Math.Ceiling((double) postCount/itemsPerPage))
            {
                url = url.ReplaceQueryStringItem("page", (page + 1).ToString());
                <a href="@url">Next</a>
            }


        </div>

        <div class="clearfix"></div>
        <!-- Pagination End -->

    }

}