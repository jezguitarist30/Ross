@*
    Shows post for landing. This is almost identical to /Post/uBlogsyPostShowPost.cshtml but gives you the option to customise it individually.
*@

@using uBlogsy.BusinessLogic
@inherits UmbracoTemplatePage
@{
    // image settings
    const string defaultImage = null;//"http://placekitten.com/g/300/200/"; // change this if want a default image. eg "http://placekitten.com/g/300/200/", else make it null (no "")
    const int imageHieght = -1; // -1 if no height specified
    const int imageWidth = 300;
    
    var node = (IPublishedContent)ViewData["Node"];   
    var url = Request.QueryString.Count == 0 ? node.Url() : string.Format("{0}?{1}", node.Url(), Request.QueryString);
    
    @ShowPost(node, url, imageHieght, imageWidth, defaultImage)
}



@helper ShowPost(IPublishedContent node, string url, int imageHieght, int imageWidth, string defaultImage)
{
    var landing = DataService.Instance.GetLanding(Model.Content);
    var authors = PostService.Instance.GetAuthors(node, false).ToList();
    var labels = PostService.Instance.GetLabels((IPublishedContent)ViewData["Node"], false);
    
    <div class="entry">
        <!-- Heading of the  post -->
        <h3><a href="@url" title="@node.GetPropertyValue("uBlogsyContentTitle")">@node.GetPropertyValue("uBlogsyContentTitle")</a></h3>

        <!-- Meta for this block -->
        <div class="meta">
            <i class="fa fa-calendar"></i>&nbsp; @(node.GetPropertyValue<DateTime>("uBlogsyPostDate").ToString("dddd MMMM d, yyyy")) &nbsp;&nbsp;&nbsp;
            @RenderAuthors(landing, authors)
            @RenderCategories(labels)                       
            <span><i class="fa fa-comment"></i> <a href="#">&nbsp;2 Comments</a></span>
        </div>
        <!-- Post Images -->
        <div class="blog-img">
            @RenderPostImage(node, imageHieght, imageWidth, defaultImage)
        </div>

        <!-- Para -->
        @RenderPostBody(node)
    </div>
}



@helper RenderPostBody(IPublishedContent d)
{
    var useSummary = DataService.Instance.GetValueFromLanding(d, "uBlogsyGeneralUseSummary");
    
    if (useSummary == "True")
    {
        @Html.Raw(d.GetPropertyValue("uBlogsyContentSummary"))
    }
    else
    {
    @Html.Raw(library.RenderMacroContent(d.GetPropertyValue<string>("uBlogsyContentBody"), d.Id))
    } 
}



@helper RenderPostImage(IPublishedContent node, int imageHieght, int imageWidth, string defaultImage)
{
    var imageId = node.GetPropertyValue<string>("uBlogsyPostImage");

    if (string.IsNullOrWhiteSpace(imageId) && string.IsNullOrWhiteSpace(defaultImage))
    {
        // no property or default so do nothing
        return;
    }

    var imageData = new Dictionary<string, object>()
             {
                 {"Alias", "uBlogsyPostImage"},
                 {"Suffix", ""},
                 {"Height", imageHieght},
                 {"Width", imageWidth},
                 {"CssClass", "img-responsive img-thumbnail"},
                 {"Title", "Main Image"},
                 {"Map", string.Empty },
                 {"DefaultImage", defaultImage},
                 {"Node", node}
             };

    @Html.Partial("~/Views/Partials/uBlogsy/Shared/uBlogsyShowImage.cshtml", imageData)
  
 }


@helper RenderAuthors(IPublishedContent landing, List<IPublishedContent> authors)
{     
    foreach (var a in authors)
    {
        var name = a.GetPropertyValue<string>("uBlogsyAuthorName").Trim();
        <i class="fa fa-user"></i> 
        @Html.Raw("&nbsp;")
        <a href="@landing.Url()?author=@Server.UrlEncode(name)" title="@name">@name</a>if (a != authors.Last())
        {<span>,</span>}
        @Html.Raw("&nbsp;&nbsp;&nbsp;")
    }
}

@helper RenderCategories(IEnumerable<IPublishedContent> labels)
{
    if (!labels.Any()) { return; }

    // get landing page
    var landing = DataService.Instance.GetLanding(Model.Content);

    foreach (var node in labels)
    {
        var label = node.GetPropertyValue<string>("uBlogsyLabelName");
        if (!string.IsNullOrEmpty(label))
        {
            <i class="fa fa-folder-open"></i>
            <a href="@landing.Url()?label=@Server.UrlEncode(label)" title="@label">&nbsp; @label</a>
            @Html.Raw("&nbsp;&nbsp;&nbsp;")
        }


    }
}


